use std::str::FromStr;
use g::G;
use ghost::Ghost;
use v::V;
use int_seq::IntSeq;
use compilation_error::CompErr;
use parser_utils::*;
use func_arg;
use std::vec::Vec;
use parser_state::ParserState;
use lalrpop_util::ParseError;
use repl_command;
use logger::Logger;
use pipeline::Pipeline;

grammar<L>(ghost:&Ghost, logger:&mut L, state:&mut ParserState<L>) where L:Logger;

match {
    "nonfunc",
    "/",
    "@",
    "!!",
    "![",
    "!(",
    "=",
    r"(-?[0-9]+\s+)*(-?[0-9]+\s*)?\*" => NUM_TOKEN_STAR,
    r"(-?[0-9]+\s+)*(-?[0-9]+\s*)?\+" => NUM_TOKEN_PLUS,
    r"(-?[0-9]+\s+)*(-?[0-9]+\s*)?\?" => NUM_TOKEN_OPT,
    ":",
    "(",
    ")",
    ";",
    "||",
    "|",
    r"<\s*([0-9]+\s+)*([0-9]+\s*)?>" => CODEPOINT_TOKEN,
    r"<\[\s*([0-9]+(-[0-9]+)?\s+)*([0-9]+(-[0-9]+)?\s*)?\]>" => CODEPOINT_RANGE_TOKEN,
    r"(!!\s*)?[#.a-zA-Zα-ωΑ-Ω∅_][#.a-zA-Zα-ωΑ-Ω∅_0-9]*\s=" => DEF_TOKEN,
    r"@\s*[#.a-zA-Zα-ωΑ-Ω∅_][#.a-zA-Zα-ωΑ-Ω∅_0-9]*\s=" => PIPE_DEF_TOKEN,
    r"[#.a-zA-Zα-ωΑ-Ω∅_][#.a-zA-Zα-ωΑ-Ω∅_0-9]*" => ID_TOKEN,
    r"-?[0-9]+" => NUM_TOKEN,
    r"'([^\n\r\\']|\\.)*'" => STR_TOKEN,
    r#""([^\n\r\\"]|\\.)*""# => D_STR_TOKEN,
    r"\[((\\.|[^\[\]\\-])-(\\.|[^\[\]\\-])|(\\.|[^\[\]\\-]))*\]" => RANGE_TOKEN,
    "]",
    ",",
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },  // Skip `/* comments */`
    r"/[a-zA-Z?_\-0-9]*" => REPL_COMMAND
}

extern {
    type Error = CompErr;
}

pub Funcs: () = {
    Statement*
};

pub ReplCmd: (String,Vec<repl_command::ReplArg>) = {
    <cmd:REPL_COMMAND> <args:ReplArg*> => (String::from(&cmd[1..]), args)
};

ReplArg: repl_command::ReplArg = {
    <s:ID>  => repl_command::ReplArg::Value(s),
    <k:ID> "=" <v:ID>  => repl_command::ReplArg::KeyValue(k,v),
    <s:StringLiteral> =>? pe(IntSeq::from_literal(V::UNKNOWN,s)).map(|s|repl_command::ReplArg::Value(String::from(s.as_str()))),
    <k:ID> "=" <v:StringLiteral> =>? pe(IntSeq::from_literal(V::UNKNOWN,v)).map(|s|repl_command::ReplArg::KeyValue(k,String::from(s.as_str())))
};

pub Statement: () = {
    <id:Def> <g:MealyUnion> =>? pe(state.introduce_variable(id.1,ghost,V::UNKNOWN,id.0,g)),
    <id:PipeDef> <g:PipelineOr> =>? pe(state.register_pipeline(id,V::UNKNOWN,g)),
};

PipelineOr: Pipeline = {
    <n:PipelineCompose> <v:("||" <PipelineCompose> )*> => v.into_iter().fold(n, |p,next|p.alternative(next))
};

PipelineCompose: Pipeline = {
    <n:PipelineAtomic> <v:(";" <PipelineAtomic> )*> => v.into_iter().fold(n,|p,next|p.composition(next))
};

PipelineAtomic: Pipeline = {
    <nonfunctional:"nonfunc"?> <mut tran:MealyUnion> => {
        let r = tran.optimise_graph(ghost);
        tran.delete(ghost);
        Pipeline::new(r,V::UNKNOWN)
    },
    "@" <i:ID> <func_arg:FuncArg> => {unimplemented!()},
    "@" <i:ID> =>? pe(state.copy_pipeline(&i).ok_or_else(||CompErr::UndefinedPipeline(V::UNKNOWN,format!("@{}",i)))),
    "@" "(" <PipelineOr> ")"
};


MealyUnion: G = {
    <n:(Weights MealyConcat)> <v:("|" <(Weights MealyConcat)> )*>  =>? pe(v.into_iter().try_fold(pre_w(n),|lhs,rhs|lhs.union(pre_w(rhs),V::UNKNOWN,ghost))),
};


MealyConcat: G = {
    <n:(MealyKleeneClosure Weights)> <v:(MealyKleeneClosure Weights)*>  => v.into_iter().fold(post_w(n),|lhs,rhs|lhs.concat(post_w(rhs),ghost)),
};

MealyKleeneClosure: G = {
    <n:(MealyAtomic Star)>  =>? pe(post_w(n).kleene(V::UNKNOWN, ghost)),
    <n:(MealyAtomic Plus)> =>? pe(post_w(n).kleene_semigroup(V::UNKNOWN, ghost)),
    <n:(MealyAtomic Opt)> =>? pe(post_w(n).kleene_optional(V::UNKNOWN, ghost)),
    <MealyAtomic>
};

MealyAtomic:G = {
    <s:StringLiteral> => G::new_from_string_literal(s,V::UNKNOWN,ghost),
    <s:Codepoint> => G::new_from_string(s.as_str(),V::UNKNOWN,ghost),
    <s:DoubleQuotedStringLiteral> => G::new_from_reflected_string_literal(s,V::UNKNOWN,ghost),
    <Range>,
    <CodepointRange>,
    <func_name:ID> <func_arg:FuncArg> =>? pe(state.external_function(func_name, ghost,V::UNKNOWN,logger, func_arg)),
    <exponential:"!!"?> <id:ID> =>? if exponential.is_some(){state.copy_variable(&id,ghost)}else{state.consume_variable(id.clone(),ghost)}.map(|e|e.2).ok_or(ParseError::User{error:CompErr::UndefinedFunction(V::UNKNOWN,id)}),
    ":" <s:StringLiteral> =>? pe(G::new_from_output_string_literal(V::UNKNOWN,s)),
    "(" <MealyUnion> ")"
};
FuncArg: func_arg::FuncArgs = {
    <t:FuncArgElement+> => <>
};
FuncArgElement: func_arg::FuncArg = {
    "![" <u:MealyUnion> "]" => func_arg::FuncArg::Expression(u),
    "!(" <i:Informant> ")" => func_arg::FuncArg::Informant(i)
};
Informant: func_arg::Informant = {
    <mut t:(<InformantElement> ",")*> <h:InformantElement>=> {
        t.push(h);
        t
    }
};
InformantElement: (IntSeq,Option<IntSeq>) = {
    <s:StringLiteral> =>? pe(IntSeq::from_literal(V::UNKNOWN,s)).map(|s|(s, None)),
    <s:StringLiteral> ":" <o:StringLiteral> =>? Ok((pe(IntSeq::from_literal(V::UNKNOWN,s))?, Some(pe(IntSeq::from_literal(V::UNKNOWN,o))?))),
    <s:StringLiteral> ":" <i:ID> =>? {
        let o = if i == "∅"{
            None
        }else if i=="ε"{
            Some(IntSeq::EPSILON)
        }else{
            return Err(ParseError::User { error:CompErr::IllegalInformantIdOutput(V::UNKNOWN, i)});
        };
        Ok((pe(IntSeq::from_literal(V::UNKNOWN,s))?,o))
    },
    <s:StringLiteral> ":" <o:Range> =>? {
        if o.is_empty(){
            Ok((pe(IntSeq::from_literal(V::UNKNOWN,s))?, None))
        }else{
            Err(ParseError::User { error:CompErr::NonEmptyInformantRangeOutput(V::UNKNOWN)})
        }
    },
}

Def:(bool,String) = <s:DEF_TOKEN> => {
    let exponential = s.starts_with("!!");
    let s = String::from(if exponential{&s[2..s.len()-1]}else{&s[..s.len()-1]}.trim());
    (exponential,s)
};
PipeDef:String = <s:PIPE_DEF_TOKEN> => String::from(s[1..s.len()-1].trim());
Codepoint: String = <s:CODEPOINT_TOKEN> =>? pe(parse_codepoints(&s[1..s.len()-1],V::UNKNOWN));
CodepointRange: G = <s:CODEPOINT_RANGE_TOKEN> =>? pe(parse_codepoint_range(&s[2..s.len()-2],V::UNKNOWN,ghost));
ID: String = <s:ID_TOKEN> => String::from(s);
Star: i32 = <s:NUM_TOKEN_STAR> => s[..s.len()-1].split_whitespace().map(|e|i32::from_str(e).unwrap()).sum();
Plus: i32 = <s:NUM_TOKEN_PLUS> => s[..s.len()-1].split_whitespace().map(|e|i32::from_str(e).unwrap()).sum();
Opt: i32 = <s:NUM_TOKEN_OPT> => s[..s.len()-1].split_whitespace().map(|e|i32::from_str(e).unwrap()).sum();
Weights: i32 = <s:NUM_TOKEN*> => s.iter().map(|e|i32::from_str(e).unwrap()).sum();
StringLiteral: &'input str = <s:STR_TOKEN> => &s[1..s.len()-1];
DoubleQuotedStringLiteral: &'input str = <s:D_STR_TOKEN> => &s[1..s.len()-1];
Range:G = <s:RANGE_TOKEN> =>? pe(parse_range(&s[1..s.len()],V::UNKNOWN,ghost));
